@Library('my-shared-library') _

pipeline {

    agent any

        parameters{

        //     choice(name = 'action', choices='create\ndelete', description='create or destroy')
               string(name:'aws_account_id', description: 'AWS ACCOUNT ID', defaultValue: '402213359600')
               string(name :'region', description :'aws region', defaultValue :'us-east-1')
               string(name :'ecr_repo_name', description : 'ECR repository name', defaultValue :'nagamani.n')
               string(name :'eks_cluster_name', description :'eks cluster name', defaultValue :'demo-cluster1')

        }
         
        environment{
            ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
            SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
            KUBECONFIG = '/home/ubuntu/.kube/config'
        } 
        stages {

            stage('Git Checkout'){

            //when {expression {params.action == 'create'}}

                steps{

                        GitCheckout(
                            branch : "main",
                            url : "https://github.com/nagamanigowda/jenkins_repo.git"
                        )
                }
            }

        //     stage('Unit Test maven'){

        //       //when {expression {params.action == 'create'}}

        //        steps{

        //            script{

        //                mvnTest()

        //            }

        //         }
        //     }
        
        // stage('Integration Test maven'){
               
        //    //when {expression {params.action == 'create'}}
                           
        //        steps{

        //            script{

        //                mvnIntegrationTest()
                        
        //            }

        //        }
        //     }

        // stage('static code analysis:sonarqube'){
               
        //   //when {expression {params.action == 'create'}}
                           
        //         steps{

        //             script{
                        
        //                 def sonarqubecredentialId = 'my-sonar'
        //                 staticCodeAnalysis(sonarqubecredentialId)
                        
        //             }

        //       }
        //     } 

        // stage('Quality Gate Status:sonarqube'){
               
        //    //when {expression {params.action == 'create'}}
                           
        //          steps{

        //             script{
                        
        //                  def sonarqubecredentialId = 'my-sonar'
        //                  QualityGateStatus(sonarqubecredentialId)
                        
        //              }

        //          }
        //      }
        // stage('Maven Build: maven'){

        //     //when {expression {params.action == 'create'}}

        //         steps{

        //             script{

        //                 mvnBuild()

        //             }

        //         }
        //     }
        // stage('Docker Image Build: ECR'){

        //     //when {expression {params.action == 'create'}}

        //         steps{

        //             script{

        //                 DockerBuild("${params.aws_account_id}", "${params.region}", "${params.ecr_repo_name}")

        //             }

        //         }
        // } 

        // stage('Docker Image Scan: Trivy'){

        //     //when {expression {params.action == 'create'}}

        //         steps{

        //             script{

        //                 DockerimageScan("${params.aws_account_id}", "${params.region}", "${params.ecr_repo_name}")
                        
        //             }

        //         }
        // }

        // stage('Docker Image Push: ECR'){

        //     //when {expression {params.action == 'create'}}

        //         steps{

        //             script{

        //                 DockerImagePush("${params.aws_account_id}", "${params.region}", "${params.ecr_repo_name}")
                        
        //             }

        //         }
        // }

        // stage('Docker Image Cleanup: Local'){

        //      //when {expression {params.action == 'create'}}

        //          steps{

        //              script{

        //                  DockerImageCleanup("${params.aws_account_id}", "${params.region}", "${params.ecr_repo_name}")

        //              }

        //          }
        // } 

        stage('create EKS cluster : terraform'){
                 
            steps{
                    
                script{
                        
                    dir('eks-module'){

                        sh """
                        terraform init
                        terraform plan -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.region}' -var-file=./config/terraform.tfvars
                        terraform apply -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.region}' -var-file=./config/terraform.tfvars -auto-approve
                        """
                    }
                        
                }

            }
        }

        stage('connect to EKS Cluster : AWS'){
                 
            steps{
                    
                script{

                    withCredentials([kubeconfigFile(credentialsId: 'kubernetes_id', variable: 'KUBECONFIG')]) {    
                    sh """
                    aws configure set aws_access_key "$ACCESS_KEY"
                    aws configure set aws_secret_key "$SECRET_KEY"
                    aws configure set region "${params.region}"
                    aws eks --region ${params.region} update-kubeconfig --name ${params.eks_cluster_name}

                    """
                    }
                        
                }

            }
        }

        stage('Deployment into EKS cluster'){

            //when {expression {params.action == 'create'}}

            steps{

                script{
                    // def apply = false

                    // try{
                    //     input message : 'please confirm to deploy on eks', ok : 'Ready to apply the config?'
                    //     apply true
                    // }
                    // catch(err){
                    //     apply = false
                    //     currentBuild.result = 'UNSTABLE'
                    // }
                    // if (apply){
                        // sh """
                        //  sudo kubectl apply -f . --kubeconfig /home/ubuntu/.kube/config

                        // """
                    withCredentials([kubeconfigFile(credentialsId: 'kubernetes_id', variable: 'KUBECONFIG')]) {
                        sh 'kubectl apply -f .'    
                    }
                        
                }   

            }
       }    
   }
}

    

  

